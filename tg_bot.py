import os
import requests
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes
)
from telegram.helpers import escape_markdown
from markdownify import markdownify as md
from dotenv import load_dotenv

# -------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ --------------------
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN")
FLASK_HOST = os.getenv("FLASK_HOST", "http://web:8000")

# -------------------- –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç --------------------
START_KB = [
    [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∫–≤–∏–∑ üéØ", callback_data="start_quiz")]
    ]


# -------------------- /start --------------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–≤–∏–∑–∞"""
    keyboard = InlineKeyboardMarkup(START_KB)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=keyboard
    )


# -------------------- –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞ --------------------
async def quiz_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∏–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    # callback_query –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    query = update.callback_query
    if query:
        await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ id –≤–æ–ø—Ä–æ—Å–æ–≤
    try:
        r = requests.get(f"{FLASK_HOST}/api/questions/", timeout=10)
        r.raise_for_status()
        all_questions = r.json()["questions"]
        all_ids = [q["id"] for q in all_questions]
    except Exception as e:
        print(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞:",
            repr(e),
            flush=True
        )
        if query:
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑ üò•")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑ üò•")
        return

    if not all_ids:
        if query:
            await query.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ üò•")
        else:
            await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ üò•")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–ª–∏ –º–µ–Ω—å—à–µ
    k = min(10, len(all_ids))
    quiz_ids = random.sample(all_ids, k=k)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ user_data
    ctx.user_data['quiz_ids'] = quiz_ids
    ctx.user_data['quiz_index'] = 0
    ctx.user_data['quiz_correct'] = 0
    ctx.user_data['quiz_total'] = k

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_quiz_question(update, ctx)


# -------------------- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ --------------------
async def send_quiz_question(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    idx = ctx.user_data['quiz_index']
    q_id = ctx.user_data['quiz_ids'][idx]

    try:
        r = requests.get(f"{FLASK_HOST}/api/questions/{q_id}/", timeout=10)
        r.raise_for_status()
        question = r.json()["question"]
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–≤–∏–∑–∞:", repr(e), flush=True)
        if update.callback_query:
            await update.callback_query.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞ üò•"
            )
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–∞ üò•")
        return

    # –ö–Ω–æ–ø–∫–∏ "–ó–Ω–∞—é / –ù–µ –∑–Ω–∞—é"
    keyboard = [
        [
            InlineKeyboardButton("–ó–Ω–∞—é ‚úÖ", callback_data="know"),
            InlineKeyboardButton("–ù–µ –∑–Ω–∞—é ‚ùå", callback_data="dont_know"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    text_safe = escape_markdown(question["title"], version=2)
    if update.callback_query:
        await update.callback_query.message.reply_text(
            text_safe, reply_markup=reply_markup, parse_mode="MarkdownV2"
        )
    else:
        await update.message.reply_text(
            text_safe, reply_markup=reply_markup, parse_mode="MarkdownV2"
        )


# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ó–Ω–∞—é / –ù–µ –∑–Ω–∞—é" --------------------
async def quiz_answer_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    ctx.user_data['last_answer'] = query.data  # "know" –∏–ª–∏ "dont_know"

    idx = ctx.user_data['quiz_index']
    q_id = ctx.user_data['quiz_ids'][idx]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
    try:
        r = requests.get(f"{FLASK_HOST}/api/questions/{q_id}/", timeout=10)
        r.raise_for_status()
        question = r.json()["question"]
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–≤–∏–∑–∞:", repr(e), flush=True)
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–≤–µ—Ç–∞ üò•")
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
    text_md = md(question["text"]).strip()
    full_text = f"*{escape_markdown(question['title'], version=2)}*\n\n{escape_markdown(text_md, version=2)}"

    # –ö–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏–ª / –ù—É–∂–Ω–æ –ø–æ–¥—É—á–∏—Ç—å"
    keyboard = [
        [
            InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏–ª ‚úÖ", callback_data="answered"),
            InlineKeyboardButton("–ù—É–∂–Ω–æ –ø–æ–¥—É—á–∏—Ç—å ‚ùå", callback_data="review"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏
    MAX_LEN = 4000
    chunks = [
        full_text[i:i+MAX_LEN] for i in range(0, len(full_text), MAX_LEN)
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫, –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º
    for i, chunk in enumerate(chunks):
        if i == len(chunks) - 1:
            await query.message.reply_text(
                chunk, reply_markup=reply_markup, parse_mode="MarkdownV2"
            )
        else:
            await query.message.reply_text(chunk, parse_mode="MarkdownV2")


# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ "–û—Ç–≤–µ—Ç–∏–ª / –ù—É–∂–Ω–æ –ø–æ–¥—É—á–∏—Ç—å" -------------------
async def quiz_mark_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data  # "answered" –∏–ª–∏ "review"

    if action == "answered":
        ctx.user_data['quiz_correct'] += 1

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    ctx.user_data['quiz_index'] += 1
    if ctx.user_data['quiz_index'] >= ctx.user_data['quiz_total']:
        # –ö–æ–Ω–µ—Ü –∫–≤–∏–∑–∞
        correct = ctx.user_data['quiz_correct']
        total = ctx.user_data['quiz_total']

        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ üîÑ", callback_data="restart")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! ‚úÖ {correct} / {total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.",
            reply_markup=reply_markup
        )
    else:
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await send_quiz_question(update, ctx)


# -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑" --------------------
async def quiz_restart_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await quiz_start(update, ctx)


# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç –∫–≤–∏–∑–∞
    app.add_handler(CallbackQueryHandler(quiz_start, pattern="^start_quiz$"))
    # –ó–Ω–∞—é / –ù–µ –∑–Ω–∞—é
    app.add_handler(
        CallbackQueryHandler(quiz_answer_handler, pattern="^(know|dont_know)$")
    )
    # –û—Ç–≤–µ—Ç–∏–ª / –ù—É–∂–Ω–æ –ø–æ–¥—É—á–∏—Ç—å
    app.add_handler(
        CallbackQueryHandler(quiz_mark_handler, pattern="^(answered|review)$")
    )
    # –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑
    app.add_handler(
        CallbackQueryHandler(quiz_restart_handler, pattern="^restart$")
    )

    print("Bot polling‚Ä¶")
    app.run_polling()


if __name__ == "__main__":
    main()
