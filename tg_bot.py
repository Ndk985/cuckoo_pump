import os
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.helpers import escape_markdown
from markdownify import markdownify as md
from dotenv import load_dotenv

# -------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ --------------------
load_dotenv()
TOKEN = os.getenv("TG_BOT_TOKEN")
FLASK_HOST = os.getenv("FLASK_HOST", "http://web:8000")  # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ .env

# -------------------- –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ --------------------
MAIN_KB = ReplyKeyboardMarkup(
    [[KeyboardButton("–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")]],
    resize_keyboard=True,
    one_time_keyboard=False
)

# -------------------- –ö–æ–º–∞–Ω–¥–∞ /start --------------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ ¬´–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=MAIN_KB
    )

# -------------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π --------------------
async def question_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å":
        try:
            r = requests.get(f"{FLASK_HOST}/api/get-random-question/", timeout=10)
            r.raise_for_status()
            data = r.json()["opinion"]

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HTML ‚Üí Markdown
            text_md = md(data["text"]).strip()

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2
            title_safe = escape_markdown(data["title"], version=2)
            text_safe = escape_markdown(text_md, version=2)
            md_text = f"*{title_safe}*\n\n{text_safe}"

            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å MarkdownV2
                await update.message.reply_markdown_v2(md_text, reply_markup=MAIN_KB)
            except Exception as markdown_error:
                # Fallback plain-text
                print("MarkdownV2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, fallback plain-text:", repr(markdown_error), flush=True)
                await update.message.reply_text(
                    f"{data['title']}\n\n{md(data['text']).strip()}",
                    reply_markup=MAIN_KB
                )

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:", repr(e), flush=True)
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å üò•", reply_markup=MAIN_KB
            )

# -------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --------------------
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, question_handler))
    print("Bot polling‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
